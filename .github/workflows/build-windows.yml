name: Build Windows Executable

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build VideoEventMonitor for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Display Python version and files
      run: |
        python --version
        python -c "import sys; print(f'Architecture: {sys.platform}')"
        echo "Archivos en el directorio:"
        dir
        echo "Archivos Python:"
        dir *.py
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install opencv-python==4.8.1.78
        pip install pandas==2.1.1
        pip install numpy==1.24.3
        
    - name: Verify imports
      run: |
        python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')"
        python -c "import pandas; print(f'Pandas version: {pandas.__version__}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        python -c "print('✅ Dependencias básicas importadas correctamente')"
        python -c "
try:
    from eventos_0002 import VideoEventMonitor
    print('✅ eventos_0002.py importado correctamente')
except ImportError as e:
    print(f'❌ Error importando eventos_0002: {e}')
    print('Buscando archivos disponibles...')
    import os
    py_files = [f for f in os.listdir('.') if f.endswith('.py')]
    print('Archivos Python encontrados:', py_files)
"
      
    - name: Build executable with PyInstaller
      run: |
        # Verificar qué archivo usar como entrada
        echo "Archivos disponibles:"
        dir *.py
        
        # Construir usando eventos_0002.py directamente
        pyinstaller --name=VideoEventMonitor `
                   --onefile `
                   --console `
                   --add-data="*.py;." `
                   --hidden-import=cv2 `
                   --hidden-import=pandas `
                   --hidden-import=numpy `
                   --hidden-import=datetime `
                   --hidden-import=os `
                   --hidden-import=sys `
                   --clean `
                   eventos_0002.py
                   
        # Verificar que el ejecutable se creó
        if (Test-Path "dist\VideoEventMonitor.exe") {
          echo "✅ Executable created successfully!"
          dir "dist\VideoEventMonitor.exe"
        } else {
          echo "❌ Error: Executable not found!"
          exit 1
        }
      
    - name: Test executable (basic)
      run: |
        # Verificación básica del ejecutable
        cd dist
        echo "Probando ejecutable..."
        .\VideoEventMonitor.exe --version 2>&1 || .\VideoEventMonitor.exe --help 2>&1 || echo "✅ Ejecutable funciona (puede no tener comandos de ayuda)"
        
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: VideoEventMonitor-Windows
        path: dist/VideoEventMonitor.exe
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/VideoEventMonitor.exe
        body: |
          Windows Executable for Video Event Monitor
          
          Built with:
          - Python ${{ matrix.python-version }}
          - OpenCV 4.8.1
          - Pandas 2.1.1
          - NumPy 1.24.3
