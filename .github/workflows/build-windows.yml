name: Build Windows Executable

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build VideoEventMonitor for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Display Python version and files
      run: |
        python --version
        python -c "import sys; print(f'Architecture: {sys.platform}')"
        echo "Archivos en el directorio:"
        dir
        echo "Archivos Python:"
        dir *.py
        
    - name: Create main.py entry point
      run: |
        echo "Creando archivo main.py..."
        echo "# main.py - Punto de entrada para PyInstaller" > main.py
        echo "import sys" >> main.py
        echo "import os" >> main.py
        echo "" >> main.py
        echo "# Agregar el directorio actual al path para importar eventos_0002" >> main.py
        echo "sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))" >> main.py
        echo "" >> main.py
        echo "try:" >> main.py
        echo "    from eventos_0002 import VideoEventMonitor" >> main.py
        echo "    " >> main.py
        echo "    def main():" >> main.py
        echo "        \"\"\"Punto de entrada principal de la aplicacion\"\"\"" >> main.py
        echo "        monitor = VideoEventMonitor()" >> main.py
        echo "        monitor.run()" >> main.py
        echo "" >> main.py
        echo "    if __name__ == \"__main__\":" >> main.py
        echo "        main()" >> main.py
        echo "        " >> main.py
        echo "except ImportError as e:" >> main.py
        echo "    print(f\"Error de importacion: {e}\")" >> main.py
        echo "    print(\"Archivos en el directorio:\")" >> main.py
        echo "    for file in os.listdir('.'):" >> main.py
        echo "        if file.endswith('.py'):" >> main.py
        echo "            print(f\"   - {file}\")" >> main.py
        echo "    input(\"Presiona Enter para salir...\")" >> main.py
        
        echo "main.py creado"
        type main.py
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install opencv-python==4.8.1.78
        pip install pandas==2.1.1
        pip install numpy==1.24.3
        
    - name: Verify imports
      run: |
        python -c "import cv2; print('OpenCV version:', cv2.__version__)"
        python -c "import pandas; print('Pandas version:', pandas.__version__)"
        python -c "import numpy; print('NumPy version:', numpy.__version__)"
        python -c "import sys; import os; sys.path.insert(0, '.'); from eventos_0002 import VideoEventMonitor; print('SUCCESS: eventos_0002.py importado correctamente')"
      
    - name: Build executable with PyInstaller
      run: |
        # Construir usando main.py como punto de entrada
        pyinstaller --name=VideoEventMonitor --onefile --console --add-data="eventos_0002.py;." --hidden-import=cv2 --hidden-import=pandas --hidden-import=numpy --hidden-import=datetime --hidden-import=os --hidden-import=sys --clean main.py
                   
        # Verificar que el ejecutable se cre칩
        if (Test-Path "dist\VideoEventMonitor.exe") {
          echo "SUCCESS: Executable created successfully!"
          dir "dist\VideoEventMonitor.exe"
          echo "Tama침o del ejecutable:"
          (Get-Item "dist\VideoEventMonitor.exe").Length
        } else {
          echo "ERROR: Executable not found!"
          echo "Contenido de dist/:"
          if (Test-Path "dist") { dir dist }
          exit 1
        }
      
    - name: Test executable (basic)
      run: |
        # Verificaci칩n b치sica del ejecutable
        cd dist
        echo "Probando ejecutable..."
        # Ejecutar con timeout y capturar salida
        cmd /c "echo q | VideoEventMonitor.exe" 2>&1 || cmd /c "VideoEventMonitor.exe --help" 2>&1 || echo "Executable test completed"
        
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: VideoEventMonitor-Windows
        path: dist/VideoEventMonitor.exe
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/VideoEventMonitor.exe
        body: |
          Windows Executable for Video Event Monitor
          
          Built with:
          - Python ${{ matrix.python-version }}
          - OpenCV 4.8.1
          - Pandas 2.1.1
          - NumPy 1.24.3
